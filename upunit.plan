# http://blog.csdn.net/xuebank111/article/details/52872592
# http://blog.csdn.net/luckarecs/article/details/71627893

# # ============================================================================================
#改进意见：
# 1，我们的框架可以分为2层，数据处理层和业务层，业务层是对数据处理层的封装（这两个层的命名可以再商量....暂时作为代号）
数据处理层：输入为1个DataFrame
业务层：输入为csv的文件名list
这样设计的目的：有时用户想要用于分析的可能是经过清洗/拼接等操作后的DataFrame对象，这样的用户更想要调用直接接收df格式数据的函数
针对这类用户的需求，我们最底层（数据处理层）的输入应该是DataFrame格式，使用更方便，上面再来个以csv文件名为输入的封装
想直接接触底层的用户调我们的数据分析层，想更省事的用户调用我们的业务层
饭要一口口吃，建议先实现数据处理层，而我们内部使用暂时先直接调用数据层的函数
先让数据处理层覆盖全部需求，以后再在数据处理层基础上做封装
# 这里我有问题，同时参看2.多表输入问题中所说的把merge步骤交给业务层的话，数据处理层就无法覆盖全部需求。你觉得数据处理层要覆盖到什么程度？
A:我的想法是，对于那些想要直接调用数据处理层的用户，由他们自己来做merge，把merge好的数据送进数据处理层（这样他们自由度更高，
毕竟merge是一条语句就可以实现的。
目前我的函数并不要求输入的pd只包含2列。只要含有名为uid和prop的两列就行）
2.多表输入问题：
当某些特征涉及多个表时，将merge步骤交给业务层，由业务层把拼接后的表传到数据处理层进行下一步处理
这样数据处理层的输入永远是1个DataFrame表
值得思考的问题是，如何设计业务层的接口

3.其他想法：
#这段就是想法的具体设计，我觉得是特别好的开头
#我想我们可以把几大知名的比赛汇总一下(比如先罗列出40个kaggle和阿里天池的比赛)，根据这些比赛的共性进行常用实体的建模
我们可以把众多数据分析比赛中普遍有效的特征作为一些默认配置
允许用户将某个表映射为一个实体
针对这个实体，根据默认配置自动生成特征
我们的实体可以有 ：用户{id,特征}，商品{id,分类,特征}，商家{id,分类,特征}
app,广告，理财产品，商品都可以算作商品的一种
广告主，店铺等都可以算作商家的一种
通过把表映射为实体，实现真正的端到端全自动特征提取
# ============================================================================================

# # ============================================================================================
# 统一输入:csvfilename_list
#     一个list，
#           len(csvfilename_list) = 1时，propname_list为一个单层list，内存储一个或多个propname
#           len(csvfilename_list) > 1时，propname_list为一个双层list，每个单元为一个list，内存储一个或多个propname
# 统一输出:RTN_PROPFRAME_NC N = sum[len(propname_list)]
#     一个DataFrame，index为默认，一共N列，每列为抽取出的prop
# ============================================================================================
# ------------------------------------------------------------------------------------
# 输入一个含有多个csv文件名的csvfilename_list 和 其对应的 存储所需属性列名的双层list，返回一个RTN_PROPFRAME_NC
def tool_func_digest_csvs(csvfilename_list, propname_2list):
    return RTN_PROPFRAME_NC
# ------------------------------------------------------------------------------------
# 输入一个含有多个DATAFRAME_NC的DATAFRAME_NC_list 和 其中想要merge的uid的不同的属性名，返回一个合并后不去重的RTN_PROPFRAME_NC
def tool_func_merge_multi_dataframe(DATAFRAME_NC_list, commonid_list):
    return RTN_PROPFRAME_NC
# ------------------------------------------------------------------------------------
# 全局去重
def tool_func_duplicate(DATAFRAME_NC):
    return RTN_PROPFRAME_NC

# ============================================================================================
# 统一输入:DATAFRAME_2C
#     一个DataFrame，index为默认，一共两列，一列column名为实际uid（m*n），一列为实际prop(m*n)
# 统一输出:RTN_PROPFRAME_2C
#     一个DataFrame，index为默认，一共两列，一列column名为实际uid（m*1），一列为统计运算后feature（m*1）
# ============================================================================================
# ------------------------------------------------------------------------------------
# 1:输出每个uid出现的总次数
def sub_func_get_uid_frecframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 2:输出每个uid对应的所有prop的种类数
def sub_func_get_proptype_frame(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 3:输出每个uid对应的多个prop的简单求和
def sub_func_get_sum_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 4:输出每个uid对应的所有prop的平均值
def sub_func_get_avg_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 5:输出每个uid对应的所有prop的中位数
def sub_func_get_median_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 6:输出每个uid对应的所有prop的众数，出现频率最高的
def sub_func_get_mode_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 7:输出每个uid对应的所有prop的上四分卫数
def sub_func_get_upquantile_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 8:输出每个uid对应的所有prop的下四分卫数
def sub_func_get_bottomquantile_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 9:输出每个uid对应的所有prop的累积乘积
def sub_func_get_cumprod_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 10:输出每个uid对应的所有prop在全局频度排序排名最高的prop值
def sub_func_get_topfrec_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 11:输出每个uid对应的所有prop中数值最小的
def sub_func_get_minnum_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 12:输出每个uid对应的所有prop中数值最大的
def sub_func_get_maxnum_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 13:输出每个uid对应的所有prop的极差
def sub_func_get_numrange_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 14:输出每个uid对应的所有prop的方差
def sub_func_get_var_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 15:输出每个uid对应的所有prop的标准差
def sub_func_get_std_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 16:输出每个uid对应的所有prop的四分卫差
def sub_func_get_quantilerange_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 17:输出每个uid对应的所有prop的离散系数(Coefficient of Variance) std/mean
def sub_func_get_coefficient_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 18:输出每个uid对应的所有prop的一阶差分
def sub_func_get_diff_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 19:输出每个uid对应的所有prop的百分比数变化
def sub_func_get_pct_change_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 20:输出每个uid对应的所有prop不排序的变化量的标准差
def sub_func_get_diffstd_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 21:输出每个uid对应的所有prop排序后的变化量的标准差
def sub_func_get_sorteddiffstd_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 22:输出每个uid对应的所有prop的平均绝对离差(Mean Absolute Deviation)
def sub_func_get_mad_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 23:输出每个uid对应的所有prop中，出现频率最高的那种prop值
def sub_func_get_mostfrec_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 24:偏度(Skewness(三阶距))统计数据分布偏斜方向和程度的度量
def sub_func_get_skew_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 25:峰度系数(Kurtosis(四阶距))频数分布曲线顶端尖峭或扁平程度的指标
def sub_func_get_kurt_propframe(DATAFRAME_2C):
    return RTN_PROPFRAME_2C
# ------------------------------------------------------------------------------------
# 26:输出每个uid对应的所有prop进行label_func分类后的标签，标签内含类别根据label_func决定
#   label_func:{
#       'tool_func_gate',
#       'tool_func_kmeans',
#       '...'
#     潜在类别模型(Latent Class Model, LCM; Lazarsfeld & Henry, 1968)或潜在类别分析(Latent Class Analysis, LCA)
#   }
def sub_func_get_labeling_propframe(DATAFRAME_2C, label_func=None):
    return RTN_PROPFRAME_2C
# ============================================================================================
# 统一输入:DATAFRAME_1C
#     一个DataFrame，index为默认，一共一列，一列column名为prop（m*1）
# 统一输出:RTN_LABELEDFRAME_1C
#     一个DataFrame，index为默认，一共一列，一列column名为统计运算后的label（m*1）
# ============================================================================================
# ------------------------------------------------------------------------------------
# 【工具函数】根据gate_prop数值进行二分类，preserve_direction决定保留方向，被干掉的置NaN(有功能重叠？)
def tool_func_gate(DATAFRAME_1C, gate_prop, preserve_direction):
    return RTN_LABELEDFRAME_1C
# ------------------------------------------------------------------------------------
# 【工具函数】根据数值进行无监督自分类,K-means算法
def tool_func_kmeans(DATAFRAME_1C, n_cluster):
    return RTN_LABELEDFRAME_1C

# 慢慢按sklearn提供的聚类函数进行拓展，讨论意义 http://scikit-learn.org/stable/modules/clustering.html#clustering

# ============================================================================================
# 统一输入:DATAFRAME_NC (N=3)
#     一个DataFrame，index为默认，一共3列，column = 3，一列column名为实际uid（m*n1），一列为实际prop1(m*n2),一列为实际prop2(m*n3)
# 统一输出:RTN_PROPFRAME_2C
#     一个DataFrame，index为默认，一共两列，一列column名为实际uid（m*1），一列为统计运算后feature（m*1）
# ============================================================================================
# ------------------------------------------------------------------------------------
# 【工具函数】!!!这只是个例子，自定义的限制规则函数，这里先实现一个时间限制
# SPARK: https://www.zhihu.com/question/42341851/answer/207949804
def rule_restrict_time(prop_tobechecked, start_time, end_time):
    if prop_tobechecked <= end_time and prop_tobechecked >= start_time:
        return True
    else:
        return False
# ------------------------------------------------------------------------------------
# 【工具函数】在 DATAFRAME_NC 表中，根据 tool_func_restrict_rule 函数对
#  column 列中的 restrict_prop_name 属性进行处理，如果 tool_func_restrict_rule 返回为 True 则保留
def tool_func_restrict_func(DATAFRAME_NC, restrict_prop_name, restrictrule=None):
    return RTN_DATAFRAME_NC

# TODO THINK!
# def restrict_rule_outlier_rejection()

# ============================================================================================
# 【调用部分】
#  针对目标sub_func:TASK获取一个DATAFRAME_NC内UID_STR对应的一个PROP_STR的某个特征列
def single_propunit(DATAFRAME_NC, UID_STR, PROP_STR, TASK):
    return RTN_PROPFRAME_2C
#  按照TASK_LIST和PROP_STR_LIST中对应顺序获取DATAFRAME_NC表内多个属性多个运算后的多个特征列
def multi_propunit(DATAFRAME_NC, UID_STR, PROP_STR_LIST, TASK_LIST):
    return RTN_DATAFRAME_NC


# ============================================================================================
# 【IO接口部分】
# 读取csv文件
# 输出到csv文件
# 画图

# =================================施工中======================================================
# 统一输入:DATAFRAME_NC (N>=2)
#     一个DataFrame，index为默认，一共N列，column >= 2
# 统一输出:RTN_DATAFRAME_NC
#     一个DataFrame，index为默认，一共N列，column >= 1
# ============================================================================================
# prop*N
# keylist,valueproplist
#
proplist相加
proplist相减
proplist相乘
proplist相除，正反除

# ============================================================================================
# func:
#       upunit
# input:
#     [str]:[csvfilename]
#     [str]:[input_uid_name]
#     [str]:[input_prop_name]
#     [int]:[func_num]
#         [1*len_uid_unique]
        # # 集中趋势的度量:
        # 1:输出每个uid出现的总次数
        # 2:输出每个uid对应的所有prop的种类数
        # 3:输出每个uid对应的多个prop的简单求和
        # 4:输出每个uid对应的所有prop的平均值
        # 5:输出每个uid对应的所有prop的中位数
        # 6:输出每个uid对应的所有prop的众数
        # 7:输出每个uid对应的所有prop的上四分位数
        # 8:输出每个uid对应的所有prop的下四分位数
        # 9:输出每个uid对应的所有prop的累计乘积
        # 10:输出每个uid对应的所有prop在全局频度排序排名最高的prop值
        #
        # # 离散趋势的度量:
        # 11:输出每个uid对应的所有prop中数值最小的
        # 12:输出每个uid对应的所有prop中数值最大的
        # 13:输出每个uid对应的所有prop的极差
        # 14:输出每个uid对应的所有prop的方差
        # 15:输出每个uid对应的所有prop的标准差
        # 16:输出每个uid对应的所有prop的四分卫差
        # 17:输出每个uid对应的所有prop的离散系数(Coefficient of Variance)
        # 18:输出每个uid对应的所有prop的一阶差分
        # 19:输出每个uid对应的所有prop的百分比数变化
        # 20:输出每个uid对应的所有prop不排序的变化量的标准差
        # 21:输出每个uid对应的所有prop排序后的变化量的标准差
        # 22:输出每个uid对应的所有prop的平均绝对离差(Mean Absolute Deviation)
        # 23:输出每个uid对应的所有prop中，出现频率最高的那种prop值，如果并列就按全部排名靠前的选
        #
        # # 偏度与峰度的度量:
        # 24:偏度(Skewness(三阶距))统计数据分布偏斜方向和程度的度量
        # 25:峰度系数(Kurtosis(四阶距))频数分布曲线顶端尖峭或扁平程度的指标
        #
        # # 分类与截断:
        # 26:输出每个uid对应的所有prop进行divide_func分类后的标签
        # 27:gate_func进行二分类后是否保留
        #   :无监督学习自聚类后的聚类标签
        #     28:t_SNE
        #     29:PCA
        #     30:AP?
        # [1*len_prop_unique]
        #     0:输出所有prop及其对应的频度
#  output_type:[default = 0]
#     [0: write to a csv file with two content rows, return 1 if done else return 0]
#     [1: return a dict]
#     [2: graph it but dont save]
#  output:
#     if output_type == 0, return 0 or 1 and write a csv file to disk
#     elif output_type == 1, return a dict with contents
#     elif output_type == 2, plot a graph



